{"version":3,"sources":["assets/banner.svg","components/card/card.component.jsx","components/board/board.component.jsx","components/text-box/text-box.component.jsx","components/modal/modal.component.jsx","App.js","index.js","assets/pawprint.svg"],"names":["module","exports","Card","props","onClick","locked","className","flipped","style","width","size","height","alt","src","image","pawprint","Board","gridTemplateColumns","cards","map","card","key","id","hash","TextBox","Parser","text","Modal","show","target","repeat","yoyo","staggerTo","y","stagger","duration","ease","cycle","rank","emoji","backgroundImage","banner","title","subtitle","role","aria-label","luckyMatchCount","flopCount","stupidCount","App","showModal","setState","hideModal","initGame","shuffle","a","i","length","j","Math","floor","random","currentLevel","cats","board","state","boards","cols","rows","push","toString","substr","cat","index","flipCount","textBoxImage","textBoxText","responseStart","matchCount","lockedBoard","selectedCards","handleClick","slice","match","filter","otherMe","responseFoundMe","responseSeenBefore","checkWin","responseWin","currentRank","getRank","setTimeout","checkMatch","textResponse","responseObject","responseLuckyMatch","responseMatch","splice","findIndex","responseStupidMatch","responseFlopMatch","responseNoMatch","ranks","colors","name","this","staggerFrom","scale","color","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5092b420.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner.8c35c0f1.svg\";","import React from \"react\";\nimport \"./card.styles.scss\";\nimport pawprint from \"../../assets/pawprint.svg\";\n\nexport const Card = props => (\n  <div\n    onClick={props.locked ? null : () => props.onClick()}\n    className={props.flipped ? \"flip-card flipped\" : \"flip-card\"}\n    style={{\n      width: `calc(98vw / ${props.size})`,\n      height: `calc(98vw / ${props.size})`\n    }}\n  >\n    <div className=\"flip-card-inner\">\n      <div className=\"flip-card-front\">\n        <img\n          alt=\"cat\"\n          src={`https://robohash.org/${props.image}?set=set4&bgset=bg1&size=180x180`}\n        />\n      </div>\n      <div className=\"flip-card-back\">\n        <img alt=\"paw print\" src={pawprint}></img>\n      </div>\n    </div>\n  </div>\n);\n","import React from \"react\";\nimport { Card } from \"../card/card.component\";\nimport \"./board.styles.scss\";\n\nexport const Board = props => (\n  <div\n    className=\"board\"\n    style={{ gridTemplateColumns: `repeat(${props.size}, 1fr)` }}\n  >\n    {props.cards.map(card => (\n      <Card\n        key={card.id}\n        image={card.hash}\n        flipped={card.flipped}\n        locked={card.locked}\n        size={props.size}\n        onClick={() => props.onClick(card)}\n      />\n    ))}\n  </div>\n);\n","import React from \"react\";\nimport Parser from \"html-react-parser\";\nimport \"./text-box.styles.scss\";\n\nexport const TextBox = props => (\n  <div className=\"text-box\">\n    <img\n      alt=\"cat\"\n      src={`https://robohash.org/${props.image}?set=set4&size=180x180`}\n    />\n    <div>{Parser(props.text)}</div>\n  </div>\n);\n","import React from \"react\";\nimport \"./modal.styles.scss\";\nimport { Tween, Timeline, SplitLetters } from \"react-gsap\";\nimport banner from \"../../assets/banner.svg\";\n\nexport const Modal = props => (\n  <div\n    onClick={() => props.onClick()}\n    className={props.show ? \"modal show\" : \"modal hide\"}\n  >\n    <div className=\"modal-inner\">\n      <Timeline\n        target={\n          <SplitLetters>\n            <h1>Congratulations</h1>\n          </SplitLetters>\n        }\n        repeat={-1}\n        yoyo={true}\n      >\n        <Tween\n          staggerTo={{ y: \"-=0px\" }}\n          stagger={0.001}\n          duration={0.1}\n          ease=\"Quad.easeInOut\"\n          cycle={{ y: [\"-=2px\", \"+=2px\"] }}\n        />\n      </Timeline>\n      <h2>You were awarded the rank</h2>\n      <div className=\"badge-container\">\n        <div className=\"icon\">{props.rank.emoji}</div>\n        <div className=\"badge\" style={{ backgroundImage: `url(${banner})` }}>\n          {props.rank.title}\n        </div>\n      </div>\n      <p>\"{props.rank.subtitle}\"</p>\n      <ul>\n        <li>\n          <span role=\"img\" aria-label=\"birdie\">\n            🐥\n          </span>\n          <h2>Birdies: {props.luckyMatchCount}</h2>\n          <small>\n            Getting a match without seeing the corresponding card before.\n          </small>\n        </li>\n        <li>\n          <span role=\"img\" aria-label=\"flop\">\n            🙈\n          </span>\n          <h2>Flops: {props.flopCount + props.stupidCount}</h2>\n          <small>\n            Missing a match, although you have seen the corresponding card\n            before at least once.\n          </small>\n        </li>\n        <li>\n          <span role=\"img\" aria-label=\"disaster\">\n            🌋\n          </span>\n          <h2>Tragedies: {props.stupidCount}</h2>\n          <small>\n            Missing a match, although you have seen the card as well as the\n            corresponding card more than 3 times.\n          </small>\n        </li>\n      </ul>\n      <small>Tap to play again!</small>\n    </div>\n  </div>\n);\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport { Tween, Timeline, SplitLetters } from \"react-gsap\";\nimport { Board } from \"./components/board/board.component\";\nimport { TextBox } from \"./components/text-box/text-box.component\";\nimport { Modal } from \"./components/modal/modal.component\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      colors: [\n        \"#8dd3c7\",\n        \"#ffffb3\",\n        \"#bebada\",\n        \"#fb8072\",\n        \"#80b1d3\",\n        \"#fdb462\",\n        \"#b3de69\",\n        \"#fccde5\",\n        \"#d9d9d9\",\n        \"#bc80bd\",\n        \"#ccebc5\",\n        \"#ffed6f\"\n      ],\n      boards: [\n        {\n          name: \"small\",\n          cols: 2,\n          rows: 2\n        },\n        {\n          name: \"medium\",\n          cols: 4,\n          rows: 4\n        },\n        {\n          name: \"large\",\n          cols: 6,\n          rows: 6\n        }\n      ],\n      lockedBoard: false,\n      textBoxText: \"\",\n      textBoxImage: \"\",\n      cards: [],\n      selectedCards: [],\n      matchCount: 0,\n      luckyMatchCount: 0,\n      flopCount: 0,\n      stupidCount: 0,\n      currentLevel: 0,\n      showModal: false,\n      responseStart: [\n        \"<span>😺</span> can you find a match?\",\n        \"<span>😸</span> but can you also solve this?\",\n        \"<span>😼</span> here's the final challenge!\"\n      ],\n      responseWin: [\n        \"<span>😻</span> well done!\",\n        \"<span>😻</span> very good! one more, ok?\",\n        \"<span>😻</span> you did them all!!!\"\n      ],\n      responseFoundMe: [\n        \"<span>👇🏻</span>hey, that's me <span>❤️</span>\",\n        \"hee <span>❤️</span>\",\n        \"hello again <span>❤️</span>\",\n        \"i love you too! <span>❤️</span>\",\n        \"<span>❤️</span>\"\n      ],\n      responseSeenBefore: [\n        \"<span>😺</span> 3rd try on this card\",\n        \"<span>😾</span> 5th try on this card!\",\n        \"<span>🙀</span> no match after 9 tries!!!\"\n      ],\n      responseMatch: [\n        \"yup <span>👍🏻</span>\",\n        \"<span>💅🏻</span> and that's a match!\",\n        \"<span>😎😎😎</span>\",\n        \"<span>🤘🏻🤘🏻</span>rock'n'roll <span>🤘🏻🤘🏻</span>\",\n        \"<span>😲</span> you are so gooood!\",\n        \"<span>🥳</span> got it just right! <span>🥳</span>\",\n        \"you knew it <span>😜</span>\",\n        \"jawoll! <span>✊🏻</span>\"\n      ],\n      responseLuckyMatch: [\n        \"️️<span>🍀</span> lucky match!!! <span>🍀</span>\",\n        \"<span>🍻</span> cheerio!!!\",\n        \"<span>🦄</span> You are so lucky!!! <span>🌈</span>\",\n        \"⭐<span>⭐</span>⭐<span>⭐</span>⭐<span>⭐</span>⭐\",\n        \"<span>🔔</span> BINGO <span>🔔</span>\",\n        \"<span>💁🏼</span> exactly!!!\",\n        \"<span>💁🏼</span> tadaa!!!\"\n      ],\n      responseNoMatch: [\n        \"<span>☝🏼</span> fun fact: that was a cat.\",\n        \"<span>🤷🏼‍</span> no we don't look alike.\",\n        \"<span>👬</span> no were not twins.\",\n        \"<span>🐯</span> a cat, but wrong one.\",\n        \"<span>🌧</span> sorry, no match.\",\n        \"<span>🙇🏻‍</span> no match this time.\"\n      ],\n      responseFlopMatch: [\n        \"<span>🥺</span> close - but wrong\",\n        \"<span>🧐</span> seen that before.\",\n        \"<span>🙄</span> well keep on guessing...\",\n        \"<span>😓</span> no look somewhere else.\",\n        \"<span>🤞🏼</span> better luck next time.\"\n      ],\n      responseStupidMatch: [\n        \"<span>😂</span> hahaha... no.\",\n        \"<span>🤢</span>\",\n        \"<span>🤯</span>\",\n        \"<span>🤦🏻‍</span>OMG\",\n        \"🧟‍<span>🧟‍</span> NOOooo! <span>🧟‍</span>🧟‍\",\n        \"<span>🙈</span>emm... no.\"\n      ],\n      ranks: [\n        {\n          emoji: \"🧠\",\n          title: \"undefeatable mastermind\",\n          subtitle: \"i'm a bot - or a kid, or just super super smart\"\n        },\n        {\n          emoji: \"👑\",\n          title: \"king of the castle\",\n          subtitle: \"bitch, i'm a king!\"\n        },\n        {\n          emoji: \"🦖\",\n          title: \"godzilla\",\n          subtitle: \"A God, an alpha predator, Godzilla!\"\n        },\n        {\n          emoji: \"🐘\",\n          title: \"dependable elephant\",\n          subtitle: \"because elephants never forget\"\n        },\n        {\n          emoji: \"👨🏻‍✈️\",\n          title: \"compelled pilot\",\n          subtitle: \"trust me, im a pilot\"\n        },\n        {\n          emoji: \"🐁\",\n          title: \"reliable lab rat\",\n          subtitle: \"i'm doing it only for the science\"\n        },\n        {\n          emoji: \"🦊\",\n          title: \"seroius fox\",\n          subtitle: \"i'm fucking serious\"\n        },\n        {\n          emoji: \"🎩\",\n          title: \"like a sir\",\n          subtitle: \"it's my pleasure\"\n        },\n        {\n          emoji: \"🐝\",\n          title: \"spelling bee\",\n          subtitle: \"fly like a butterfly, sting like a bee\"\n        },\n        {\n          emoji: \"🐙\",\n          title: \"pitiful octopus\",\n          subtitle: \"i hug ships too hard\"\n        },\n        {\n          emoji: \"🐔\",\n          title: \"blind hen\",\n          subtitle: \"Yes i may occasionally pick up a grain\"\n        },\n        {\n          emoji: \"🧻\",\n          title: \"clueless poop ticket\",\n          subtitle: \"just rollin with the homies\"\n        },\n        {\n          emoji: \"💨\",\n          title: \"cabbage fart\",\n          subtitle: \"silent but deadly\"\n        },\n        {\n          emoji: \"🧟‍\",\n          title: \"rotten zombie\",\n          subtitle: \"neeed braaain... neeeed braaaain!1!1!\"\n        }\n      ],\n      currentRank: {}\n    };\n  }\n\n  showModal = () => {\n    this.setState({ showModal: true });\n  };\n\n  hideModal = () => {\n    this.initGame(0);\n  };\n\n  shuffle = a => {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  };\n\n  initGame = currentLevel => {\n    let cats = [];\n    let board = this.state.boards[currentLevel];\n    for (let i = 0; i < Math.floor((board.cols * board.rows) / 2); i++) {\n      cats.push({\n        hash: Math.random()\n          .toString(36)\n          .substr(2, 5)\n      });\n    }\n    const cards = this.shuffle([...cats, ...cats]).map((cat, index) => ({\n      id: index,\n      hash: cat.hash,\n      flipped: false,\n      locked: false,\n      flipCount: 0\n    }));\n    this.setState({\n      currentLevel: currentLevel,\n      cards: cards,\n      textBoxImage: cards[0].hash,\n      textBoxText: this.state.responseStart[currentLevel],\n      matchCount: 0,\n      lockedBoard: false,\n      selectedCards: [],\n      showModal: false\n    });\n  };\n\n  componentDidMount() {\n    this.initGame(0);\n  }\n\n  handleClick = card => {\n    if (!this.state.lockedBoard) {\n      const cards = this.state.cards.slice();\n      cards[card.id].flipped = true;\n      cards[card.id].locked = true;\n      cards[card.id].flipCount++;\n      this.setState({ cards: cards });\n\n      let match = cards.filter(otherMe => card.hash === otherMe.hash);\n\n      //found me/other me\n      if (card.id === 0 || cards[0].hash === match[1].hash) {\n        this.setState({\n          textBoxText:\n            card.flipCount < this.state.responseFoundMe.length\n              ? this.state.responseFoundMe[card.flipCount - 1]\n              : this.state.responseFoundMe[\n                  this.state.responseFoundMe.length - 1\n                ]\n        });\n      }\n      // seen before\n      switch (card.flipCount) {\n        case 3:\n          this.setState({\n            textBoxText: this.state.responseSeenBefore[0]\n          });\n          break;\n        case 5:\n          this.setState({\n            textBoxText: this.state.responseSeenBefore[1]\n          });\n          break;\n        case 10:\n          this.setState({\n            textBoxText: this.state.responseSeenBefore[2]\n          });\n          break;\n        default:\n      }\n\n      const selectedCards = this.state.selectedCards.slice();\n      selectedCards.push(card);\n      this.setState({ selectedCards: selectedCards });\n      if (selectedCards.length === 2) {\n        this.setState({ lockedBoard: true });\n        this.checkWin(cards);\n      }\n    }\n  };\n\n  checkWin = cards => {\n    const matchCount = this.state.matchCount + 2;\n    if (matchCount === cards.length) {\n      this.setState({\n        textBoxText: this.state.responseWin[this.state.currentLevel],\n        currentRank: this.getRank()\n      });\n      setTimeout(() => {\n        const currentLevel = this.state.currentLevel + 1;\n        if (currentLevel > this.state.boards.length) {\n          this.showModal();\n        } else {\n          this.initGame(currentLevel);\n        }\n      }, 3000);\n    } else {\n      setTimeout(() => {\n        this.checkMatch(this.state.selectedCards);\n      }, 1000);\n    }\n  };\n\n  textResponse = responseObject => {\n    const response = this.shuffle(responseObject);\n    return response[0];\n  };\n\n  checkMatch = selectedCards => {\n    const cards = this.state.cards.slice();\n    let matchCount = this.state.matchCount;\n    let textBoxText = \"\";\n    if (selectedCards[0].hash === selectedCards[1].hash) {\n      matchCount += 2;\n      //lucky match?\n      if (selectedCards[1].flipCount === 1) {\n        textBoxText = this.textResponse(this.state.responseLuckyMatch);\n        const luckyMatchCount = this.state.luckyMatchCount + 1;\n        this.setState({ luckyMatchCount: luckyMatchCount });\n      } else {\n        textBoxText = this.textResponse(this.state.responseMatch);\n      }\n    } else {\n      cards[selectedCards[0].id].flipped = false;\n      cards[selectedCards[1].id].flipped = false;\n      cards[selectedCards[0].id].locked = false;\n      cards[selectedCards[1].id].locked = false;\n\n      let match = cards.filter(card => card.hash === selectedCards[0].hash);\n      match.splice(\n        selectedCards.findIndex(card => card.id === selectedCards[0].id),\n        1\n      );\n\n      if (selectedCards[0].flipCount > 3 && selectedCards[1].flipCount > 3) {\n        //stupid? player has seen the card as well as the corresponding card more than three times\n        textBoxText = this.textResponse(this.state.responseStupidMatch);\n\n        const stupidCount = this.state.stupidCount + 1;\n        this.setState({ stupidCount: stupidCount });\n      } else if (match[0].flipCount > 0) {\n        //flop? player has seen the corresponing card before...\n        textBoxText = this.textResponse(this.state.responseFlopMatch);\n\n        const flopCount = this.state.flopCount + 1;\n        this.setState({ flopCount: flopCount });\n      } else {\n        textBoxText = this.textResponse(this.state.responseNoMatch);\n      }\n    }\n    selectedCards = [];\n    this.setState({\n      textBoxText: textBoxText,\n      selectedCards: selectedCards,\n      matchCount: matchCount,\n      lockedBoard: false\n    });\n  };\n\n  getRank = () => {\n    const mistakes =\n      this.state.flopCount +\n      this.state.stupidCount * 2 -\n      this.state.luckyMatchCount * 2;\n    const handycap = 50;\n    let rank = mistakes - handycap;\n    rank = rank < 0 ? 0 : rank;\n    rank = rank > this.state.ranks.length ? this.state.ranks.length - 1 : rank;\n    return this.state.ranks[rank];\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Timeline\n          target={\n            <SplitLetters>\n              <h1>Fluffy Twins</h1>\n            </SplitLetters>\n          }\n        >\n          <Tween\n            staggerFrom={{ y: \"-=200px\", scale: 1, color: \"#0ccac4\" }}\n            staggerTo={{ y: \"0px\", scale: 1, color: \"#0ccac4\" }}\n            stagger={0.1}\n            duration={2}\n            ease=\"Bounce.easeOut\"\n          />\n          <Tween\n            staggerFrom={{ scale: 1.5, color: \"white\" }}\n            staggerTo={{ scale: 1 }}\n            stagger={0.1}\n            duration={0.2}\n            cycle={{\n              color: this.state.colors\n            }}\n          />\n        </Timeline>\n\n        <TextBox\n          text={this.state.textBoxText}\n          image={this.state.textBoxImage}\n        />\n        <Board\n          size={this.state.boards[this.state.currentLevel].cols}\n          cards={this.state.cards}\n          onClick={card => this.handleClick(card)}\n        />\n        <Modal\n          show={this.state.showModal}\n          luckyMatchCount={this.state.luckyMatchCount}\n          flopCount={this.state.flopCount}\n          stupidCount={this.state.stupidCount}\n          rank={this.state.currentRank}\n          onClick={() => this.hideModal()}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","module.exports = __webpack_public_path__ + \"static/media/pawprint.5695bb1a.svg\";"],"sourceRoot":""}