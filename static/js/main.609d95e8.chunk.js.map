{"version":3,"sources":["assets/pawprint.svg","assets/banner.svg","components/card/card.component.jsx","components/board/board.component.jsx","components/text-box/text-box.component.jsx","components/modal/modal.component.jsx","App.js","index.js"],"names":["module","exports","Card","getClassname","className","props","flipped","push","zoomed","borderTranslate","join","onClick","this","locked","style","width","size","height","alt","src","image","pawprint","Component","Board","getBorderTranslate","id","level","gridTemplateColumns","cards","map","card","key","hash","TextBox","Parser","text","Modal","show","target","repeat","yoyo","staggerTo","y","stagger","duration","ease","cycle","rank","emoji","backgroundImage","banner","title","rankIndicator","subtitle","role","aria-label","luckyMatchCount","flopCount","stupidCount","App","showModal","setState","hideModal","initGame","state","currentLevel","shuffle","a","i","length","j","Math","floor","random","cats","board","boards","cols","rows","toString","substr","cat","index","flipCount","textBoxImage","textBoxText","responseStart","matchCount","lockedBoard","selectedCards","handleClick","slice","currentRank","getRank","match","filter","otherMe","responseFoundMe","responseSeenBefore","checkWin","responseWin","setTimeout","checkMatch","textResponse","responseObject","responseLuckyMatch","responseMatch","splice","findIndex","responseStupidMatch","responseFlopMatch","responseNoMatch","mistakes","ranks","colors","name","staggerFrom","scale","color","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.609d95e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pawprint.5695bb1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/banner.8c35c0f1.svg\";","import React, { Component } from \"react\";\nimport \"./card.styles.scss\";\nimport pawprint from \"../../assets/pawprint.svg\";\n\nclass Card extends Component {\n  getClassname = () => {\n    let className = [\"flip-card\"];\n    if (this.props.flipped) className.push(\"flipped\");\n    if (this.props.zoomed) className.push(\"zoomed\");\n\n    return [...className, ...this.props.borderTranslate].join(\" \");\n  };\n  render() {\n    return (\n      <div\n        onClick={this.props.locked ? null : () => this.props.onClick()}\n        className={this.getClassname()}\n        style={{\n          width: `calc(98vw / ${this.props.size})`,\n          height: `calc(98vw / ${this.props.size})`\n        }}\n      >\n        <div className=\"flip-card-inner\">\n          <div className=\"flip-card-front\">\n            <img\n              alt=\"cat\"\n              src={`https://robohash.org/${this.props.image}?set=set4&bgset=bg1&size=180x180`}\n            />\n          </div>\n          <div className=\"flip-card-back\">\n            <img alt=\"paw print\" src={pawprint}></img>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport Card from \"../card/card.component\";\nimport \"./board.styles.scss\";\n\nclass Board extends Component {\n  getBorderTranslate = (id, size) => {\n    let borderTranslate = [];\n    if (id < size) borderTranslate.push(\"border-top\");\n    if (id % size === 0) borderTranslate.push(\"border-left\");\n    if (id % size === size - 1) borderTranslate.push(\"border-right\");\n    if (id >= size * (size - 1)) borderTranslate.push(\"border-bottom\");\n    return borderTranslate;\n  };\n\n  render() {\n    return (\n      <div\n        className={`board level-${this.props.level}`}\n        style={{ gridTemplateColumns: `repeat(${this.props.size}, 1fr)` }}\n      >\n        {this.props.cards.map(card => (\n          <Card\n            key={card.id}\n            image={card.hash}\n            flipped={card.flipped}\n            zoomed={card.zoomed}\n            locked={card.locked}\n            size={this.props.size}\n            borderTranslate={this.getBorderTranslate(card.id, this.props.size)}\n            onClick={() => this.props.onClick(card)}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\";\nimport Parser from \"html-react-parser\";\nimport \"./text-box.styles.scss\";\n\nexport const TextBox = props => (\n  <div className=\"text-box\">\n    <img\n      alt=\"cat\"\n      src={`https://robohash.org/${props.image}?set=set4&size=180x180`}\n    />\n    <div>{Parser(props.text)}</div>\n  </div>\n);\n","import React from \"react\";\nimport \"./modal.styles.scss\";\nimport { Tween, Timeline, SplitLetters } from \"react-gsap\";\nimport banner from \"../../assets/banner.svg\";\n\nexport const Modal = props => (\n  <div\n    onClick={() => props.onClick()}\n    className={props.show ? \"modal show\" : \"modal hide\"}\n  >\n    <div className=\"modal-inner\">\n      <Timeline\n        target={\n          <SplitLetters>\n            <h1>Congratulations</h1>\n          </SplitLetters>\n        }\n        repeat={-1}\n        yoyo={true}\n      >\n        <Tween\n          staggerTo={{ y: \"-=0px\" }}\n          stagger={0.001}\n          duration={0.1}\n          ease=\"Quad.easeInOut\"\n          cycle={{ y: [\"-=2px\", \"+=2px\"] }}\n        />\n      </Timeline>\n      <h2>You were awarded the rank</h2>\n      <div className=\"badge-container\">\n        <div className=\"icon\">{props.rank.emoji}</div>\n        <div className=\"badge\" style={{ backgroundImage: `url(${banner})` }}>\n          {props.rank.title}\n        </div>\n        <div className=\"rank-indicator\">\n          <small>#</small>\n          {props.rankIndicator}\n        </div>\n      </div>\n      <p>\"{props.rank.subtitle}\"</p>\n      <ul>\n        <li>\n          <span role=\"img\" aria-label=\"birdie\">\n            🐥\n          </span>\n          <h2>Birdies: {props.luckyMatchCount}</h2>\n          <small>\n            Getting a match without seeing the corresponding card before.\n          </small>\n        </li>\n        <li>\n          <span role=\"img\" aria-label=\"flop\">\n            🙈\n          </span>\n          <h2>Flops: {props.flopCount + props.stupidCount}</h2>\n          <small>\n            Missing a match, although you have seen the corresponding card\n            before at least once.\n          </small>\n        </li>\n        <li>\n          <span role=\"img\" aria-label=\"disaster\">\n            🌋\n          </span>\n          <h2>Tragedies: {props.stupidCount}</h2>\n          <small>\n            Missing a match, although you have seen the card as well as the\n            corresponding card more than 3 times.\n          </small>\n        </li>\n      </ul>\n      <small>Tap to play again!</small>\n    </div>\n  </div>\n);\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport { Tween, Timeline, SplitLetters } from \"react-gsap\";\nimport Board from \"./components/board/board.component\";\nimport { TextBox } from \"./components/text-box/text-box.component\";\nimport { Modal } from \"./components/modal/modal.component\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      colors: [\n        \"#8dd3c7\",\n        \"#ffffb3\",\n        \"#bebada\",\n        \"#fb8072\",\n        \"#80b1d3\",\n        \"#fdb462\",\n        \"#b3de69\",\n        \"#fccde5\",\n        \"#d9d9d9\",\n        \"#bc80bd\",\n        \"#ccebc5\",\n        \"#ffed6f\"\n      ],\n      boards: [\n        {\n          name: \"small\",\n          cols: 2,\n          rows: 2\n        },\n        {\n          name: \"medium\",\n          cols: 4,\n          rows: 4\n        },\n        {\n          name: \"large\",\n          cols: 6,\n          rows: 6\n        }\n      ],\n      lockedBoard: false,\n      textBoxText: \"\",\n      textBoxImage: \"\",\n      cards: [],\n      selectedCards: [],\n      matchCount: 0,\n      luckyMatchCount: 0,\n      flopCount: 0,\n      stupidCount: 0,\n      currentLevel: 0,\n      showModal: false,\n      responseStart: [\n        \"<span>😺</span> can you find a match?\",\n        \"<span>😸</span> but can you also solve this?\",\n        \"<span>😼</span> here's the final challenge!\"\n      ],\n      responseWin: [\n        \"<span>😻</span> well done!\",\n        \"<span>😻</span> very good! one more, ok?\",\n        \"<span>😻</span> you did them all!!!\"\n      ],\n      responseFoundMe: [\n        \"<span>👇🏻</span>hey, that's me <span>❤️</span>\",\n        \"hee <span>❤️</span>\",\n        \"hello again <span>❤️</span>\",\n        \"i love you too! <span>❤️</span>\",\n        \"<span>❤️</span>\"\n      ],\n      responseSeenBefore: [\n        \"<span>😺</span> 3rd try on this card\",\n        \"<span>😾</span> 5th try on this card!\",\n        \"<span>🙀</span> no match after 9 tries!!!\"\n      ],\n      responseMatch: [\n        \"yup <span>👍🏻</span>\",\n        \"<span>💅🏻</span> and that's a match!\",\n        \"<span>😎😎😎</span>\",\n        \"<span>🤘🏻🤘🏻</span>rock'n'roll <span>🤘🏻🤘🏻</span>\",\n        \"<span>😲</span> you are so gooood!\",\n        \"<span>🥳</span> got it just right! <span>🥳</span>\",\n        \"you knew it <span>😜</span>\",\n        \"jawoll! <span>✊🏻</span>\",\n        \"<span>🍻</span> cheerio!\",\n        \"<span>🦄</span> You are so lucky.<span>🌈</span>\",\n        \"<span>🔔</span> BINGO <span>🔔</span>\",\n        \"<span>💁🏼</span> exactly.\",\n        \"<span>💁🏼</span> tadaa!\"\n      ],\n      responseLuckyMatch: [\"️️<span>🐥</span> BIRDIE!!! <span>🐥</span>\"],\n      responseNoMatch: [\n        \"<span>☝🏼</span> fun fact: that was a cat.\",\n        \"<span>🤷🏼‍</span> no we don't look alike.\",\n        \"<span>👬</span> no were not twins.\",\n        \"<span>🐯</span> a cat, but wrong one.\",\n        \"<span>🌧</span> sorry, no match.\",\n        \"<span>🙇🏻‍</span> no match this time.\"\n      ],\n      responseFlopMatch: [\n        \"<span>🥺</span> sorry. wrong.\",\n        \"<span>🧐</span> seen that one before.\",\n        \"<span>🙄</span> well keep on guessing...\",\n        \"<span>😓</span> no. no. no!!!\",\n        \"<span>🤞🏼</span> better luck next time.\"\n      ],\n      responseStupidMatch: [\n        \"<span>😂</span> hahaha... no.\",\n        \"<span>🤢</span>\",\n        \"<span>🤯</span>\",\n        \"<span>🤦🏻‍</span>OMG\",\n        \"🧟‍<span>🧟‍</span> NOOooo! <span>🧟‍</span>🧟‍\",\n        \"<span>🙈</span>emm... no.\"\n      ],\n      ranks: [\n        {\n          emoji: \"🧠\",\n          title: \"Braniac\",\n          subtitle: \"I'm a bot - or a kid, or just super super smart\"\n        },\n        {\n          emoji: \"👑\",\n          title: \"King of the castle\",\n          subtitle: \"Bitch, i'm a king!\"\n        },\n        {\n          emoji: \"🦖\",\n          title: \"Godzilla\",\n          subtitle: \"A God, an alpha predator, Godzilla!\"\n        },\n        {\n          emoji: \"🐘\",\n          title: \"Dependable elephant\",\n          subtitle: \"Because elephants never forget\"\n        },\n        {\n          emoji: \"👨🏻‍✈️\",\n          title: \"Compelled pilot\",\n          subtitle: \"Trust me, im a pilot\"\n        },\n        {\n          emoji: \"🐁\",\n          title: \"Reliable lab rat\",\n          subtitle: \"I'm doing it only for the science\"\n        },\n        {\n          emoji: \"🦊\",\n          title: \"Serious fox\",\n          subtitle: \"I'm fucking serious\"\n        },\n        {\n          emoji: \"🎩\",\n          title: \"Like a Sir\",\n          subtitle: \"It's my pleasure\"\n        },\n        {\n          emoji: \"🐝\",\n          title: \"Busy bee\",\n          subtitle: \"Fly like a butterfly, sting like a bee\"\n        },\n        {\n          emoji: \"🐙\",\n          title: \"Pitiful octopus\",\n          subtitle: \"I hug ships too hard\"\n        },\n        {\n          emoji: \"🐔\",\n          title: \"Blind hen\",\n          subtitle: \"Yes i may occasionally pick up a grain\"\n        },\n        {\n          emoji: \"🧻\",\n          title: \"Clueless poop ticket\",\n          subtitle: \"Just rollin with the homies\"\n        },\n        {\n          emoji: \"💨\",\n          title: \"Cabbage fart\",\n          subtitle: \"Silent but deadly\"\n        },\n        {\n          emoji: \"🧟‍\",\n          title: \"Rotten zombie\",\n          subtitle: \"neeed braaain... neeeed braaaain!1!1!\"\n        }\n      ],\n      currentRank: {}\n    };\n  }\n\n  showModal = () => {\n    this.setState({ showModal: true });\n  };\n\n  hideModal = () => {\n    this.initGame(this.state.currentLevel);\n  };\n\n  shuffle = a => {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  };\n\n  initGame = currentLevel => {\n    let cats = [];\n    let board = this.state.boards[currentLevel];\n    for (let i = 0; i < Math.floor((board.cols * board.rows) / 2); i++) {\n      cats.push({\n        hash: Math.random()\n          .toString(36)\n          .substr(2, 5)\n      });\n    }\n    const cards = this.shuffle([...cats, ...cats]).map((cat, index) => ({\n      id: index,\n      hash: cat.hash,\n      flipped: false,\n      zoomed: false,\n      locked: false,\n      flipCount: 0\n    }));\n    this.setState({\n      currentLevel: currentLevel,\n      cards: cards,\n      textBoxImage: cards[0].hash,\n      textBoxText: this.state.responseStart[currentLevel],\n      matchCount: 0,\n      lockedBoard: false,\n      selectedCards: [],\n      showModal: false\n    });\n  };\n\n  componentDidMount() {\n    this.initGame(this.state.currentLevel);\n  }\n\n  handleClick = card => {\n    if (!this.state.lockedBoard) {\n      const cards = this.state.cards.slice();\n      cards[card.id].flipped = true;\n      cards[card.id].zoomed = true;\n      cards[card.id].locked = true;\n      cards[card.id].flipCount++;\n      this.setState({ cards: cards, currentRank: this.getRank() });\n\n      let match = cards.filter(otherMe => card.hash === otherMe.hash);\n\n      //found me/other me\n      if (card.id === 0 || cards[0].hash === match[1].hash) {\n        this.setState({\n          textBoxText:\n            card.flipCount < this.state.responseFoundMe.length\n              ? this.state.responseFoundMe[card.flipCount - 1]\n              : this.state.responseFoundMe[\n                  this.state.responseFoundMe.length - 1\n                ]\n        });\n      }\n      // seen before\n      switch (card.flipCount) {\n        case 3:\n          this.setState({\n            textBoxText: this.state.responseSeenBefore[0]\n          });\n          break;\n        case 5:\n          this.setState({\n            textBoxText: this.state.responseSeenBefore[1]\n          });\n          break;\n        case 10:\n          this.setState({\n            textBoxText: this.state.responseSeenBefore[2]\n          });\n          break;\n        default:\n      }\n\n      const selectedCards = this.state.selectedCards.slice();\n\n      selectedCards.push(card);\n      this.setState({ selectedCards: selectedCards });\n      if (selectedCards.length === 2) {\n        cards[selectedCards[0].id].zoomed = false;\n        this.setState({ lockedBoard: true, cards: cards });\n\n        this.checkWin(cards);\n      }\n    }\n  };\n\n  checkWin = cards => {\n    const matchCount = this.state.matchCount + 2;\n    if (matchCount === cards.length) {\n      this.setState({\n        textBoxText: this.state.responseWin[this.state.currentLevel]\n      });\n      setTimeout(() => {\n        const currentLevel = this.state.currentLevel + 1;\n        if (currentLevel > this.state.boards.length - 1) {\n          this.showModal();\n        } else {\n          this.initGame(currentLevel);\n        }\n      }, 3000);\n    } else {\n      setTimeout(() => {\n        this.checkMatch(this.state.selectedCards);\n      }, 1000);\n    }\n  };\n\n  textResponse = responseObject => {\n    const response = this.shuffle(responseObject);\n    return response[0];\n  };\n\n  checkMatch = selectedCards => {\n    const cards = this.state.cards.slice();\n    let matchCount = this.state.matchCount;\n    let textBoxText = \"\";\n    if (selectedCards[0].hash === selectedCards[1].hash) {\n      matchCount += 2;\n      //lucky match?\n      if (selectedCards[1].flipCount === 1) {\n        textBoxText = this.textResponse(this.state.responseLuckyMatch);\n        const luckyMatchCount = this.state.luckyMatchCount + 1;\n        this.setState({ luckyMatchCount: luckyMatchCount });\n      } else {\n        textBoxText = this.textResponse(this.state.responseMatch);\n      }\n    } else {\n      cards[selectedCards[0].id].flipped = false;\n      cards[selectedCards[1].id].flipped = false;\n      cards[selectedCards[0].id].locked = false;\n      cards[selectedCards[1].id].locked = false;\n      cards[selectedCards[1].id].zoomed = false;\n\n      let match = cards.filter(card => card.hash === selectedCards[0].hash);\n      match.splice(\n        selectedCards.findIndex(card => card.id === selectedCards[0].id),\n        1\n      );\n\n      if (selectedCards[0].flipCount > 3 && selectedCards[1].flipCount > 3) {\n        //stupid? player has seen the card as well as the corresponding card more than three times\n        textBoxText = this.textResponse(this.state.responseStupidMatch);\n\n        const stupidCount = this.state.stupidCount + 1;\n        this.setState({ stupidCount: stupidCount });\n      } else if (match[0].flipCount > 0) {\n        //flop? player has seen the corresponing card before...\n        textBoxText = this.textResponse(this.state.responseFlopMatch);\n\n        const flopCount = this.state.flopCount + 1;\n        this.setState({ flopCount: flopCount });\n      } else {\n        textBoxText = this.textResponse(this.state.responseNoMatch);\n      }\n    }\n    cards[selectedCards[1].id].zoomed = false;\n    selectedCards = [];\n    this.setState({\n      textBoxText: textBoxText,\n      selectedCards: selectedCards,\n      matchCount: matchCount,\n      lockedBoard: false\n    });\n  };\n\n  getRank = () => {\n    const mistakes =\n      this.state.flopCount +\n      this.state.stupidCount * 2 -\n      this.state.luckyMatchCount * 2;\n    const handycap = 100;\n    let rank = Math.floor((mistakes / handycap) * this.state.ranks.length);\n    rank = rank < 0 ? 0 : rank;\n    rank = rank > this.state.ranks.length ? this.state.ranks.length - 1 : rank;\n    return this.state.ranks[rank];\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Timeline\n          target={\n            <SplitLetters>\n              <h1>Fluffy Twins</h1>\n            </SplitLetters>\n          }\n        >\n          <Tween\n            staggerFrom={{ y: \"-=200px\", scale: 1, color: \"#0ccac4\" }}\n            staggerTo={{ y: \"0px\", scale: 1, color: \"#0ccac4\" }}\n            stagger={0.1}\n            duration={2}\n            ease=\"Bounce.easeOut\"\n          />\n          <Tween\n            staggerFrom={{ scale: 1.5, color: \"white\" }}\n            staggerTo={{ scale: 1 }}\n            stagger={0.1}\n            duration={0.2}\n            cycle={{\n              color: this.state.colors\n            }}\n          />\n        </Timeline>\n\n        <TextBox\n          text={this.state.textBoxText}\n          image={this.state.textBoxImage}\n        />\n        <Board\n          size={this.state.boards[this.state.currentLevel].cols}\n          cards={this.state.cards}\n          level={this.state.currentLevel}\n          onClick={card => this.handleClick(card)}\n        />\n        <Modal\n          show={this.state.showModal}\n          luckyMatchCount={this.state.luckyMatchCount}\n          flopCount={this.state.flopCount}\n          stupidCount={this.state.stupidCount}\n          rank={this.state.currentRank}\n          rankIndicator={\n            this.state.ranks.findIndex(\n              rank => rank.title === this.state.currentRank.title\n            ) + 1\n          }\n          onClick={() => this.hideModal()}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}