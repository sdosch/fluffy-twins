{"version":3,"sources":["assets/pawprint.svg","components/card/card.component.jsx","components/board/board.component.jsx","components/select-box/select-box-component.jsx","App.js","index.js"],"names":["module","exports","Card","onClick","this","props","locked","className","flipped","style","width","size","height","alt","src","image","pawprint","Component","Board","gridTemplateColumns","cards","map","card","key","id","hash","SelectBox","handleSelectChange","selected","setState","onSelectChange","state","value","onChange","e","target","options","option","name","App","shuffle","a","i","length","j","Math","floor","random","handleSelectBox","initGame","selectedBoard","boards","find","board","cats","cols","rows","push","toString","substr","cat","index","flipCount","console","log","handleClick","lockedBoard","slice","selectedCards","setTimeout","checkMatch","matchCount","match","filter","splice","findIndex","luckyMatchCount","flopCount","stupidCount","ceil","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.568e7cd6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pawprint.5695bb1a.svg\";","import React, { Component } from \"react\";\nimport \"./card.styles.scss\";\nimport pawprint from \"../../assets/pawprint.svg\";\n\nclass Card extends Component {\n  render() {\n    return (\n      <div\n        onClick={this.props.locked ? null : () => this.props.onClick()}\n        className={this.props.flipped ? \"flip-card flipped\" : \"flip-card\"}\n        style={{\n          width: `calc(98vw / ${this.props.size})`,\n          height: `calc(98vw / ${this.props.size})`\n        }}\n      >\n        <div className=\"flip-card-inner\">\n          <div className=\"flip-card-front\">\n            <img\n              alt=\"cat\"\n              src={`https://robohash.org/${this.props.image}?set=set4&bgset=bg1&size=180x180`}\n            />\n          </div>\n          <div className=\"flip-card-back\">\n            <img alt=\"paw print\" src={pawprint}></img>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport Card from \"../card/card.component\";\nimport \"./board.styles.scss\";\n\nclass Board extends Component {\n  render() {\n    return (\n      <div\n        className=\"board\"\n        style={{ gridTemplateColumns: `repeat(${this.props.size}, 1fr)` }}\n      >\n        {this.props.cards.map(card => (\n          <Card\n            key={card.id}\n            image={card.hash}\n            flipped={card.flipped}\n            locked={card.locked}\n            size={this.props.size}\n            onClick={() => this.props.onClick(card)}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport \"./select-box.styles.scss\";\n\nclass SelectBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: 1\n    };\n  }\n\n  handleSelectChange = selected => {\n    this.setState({ selected: selected });\n    this.props.onSelectChange(selected);\n  };\n\n  render() {\n    return (\n      <div className=\"select\">\n        <label>size:</label>\n        <select\n          value={this.state.selected}\n          onChange={e => this.handleSelectChange(e.target.value)}\n        >\n          {this.props.options.map(option => (\n            <option key={option.name} value={option.name}>\n              {option.name}\n            </option>\n          ))}\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default SelectBox;\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport Board from \"./components/board/board.component\";\nimport SelectBox from \"./components/select-box/select-box-component\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      boards: [\n        {\n          name: \"small\",\n          cols: 2,\n          rows: 2\n        },\n        {\n          name: \"medium\",\n          cols: 4,\n          rows: 4\n        },\n        {\n          name: \"large\",\n          cols: 6,\n          rows: 6\n        }\n      ],\n      selectedBoard: {},\n      lockedBoard: false,\n      cards: [],\n      selectedCards: [],\n      matchCount: 0,\n      luckyMatchCount: 0,\n      flopCount: 0,\n      stupidCount: 0\n    };\n  }\n\n  shuffle = a => {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  };\n\n  handleSelectBox = selected => {\n    this.initGame(selected);\n  };\n\n  initGame = name => {\n    this.setState(\n      { selectedBoard: this.state.boards.find(board => board.name === name) },\n      () => {\n        let cats = [];\n        for (\n          let i = 0;\n          i <\n          Math.floor(\n            (this.state.selectedBoard.cols * this.state.selectedBoard.rows) / 2\n          );\n          i++\n        ) {\n          cats.push({\n            hash: Math.random()\n              .toString(36)\n              .substr(2, 5)\n          });\n        }\n        const cards = this.shuffle([...cats, ...cats]).map((cat, index) => ({\n          id: index,\n          hash: cat.hash,\n          flipped: false,\n          locked: false,\n          flipCount: 0\n        }));\n        this.setState({ cards: cards });\n        console.log(\"Ready? Choose a card and find a match!\");\n      }\n    );\n  };\n\n  componentDidMount() {\n    this.initGame(this.state.boards[0].name);\n  }\n\n  handleClick = card => {\n    if (!this.state.lockedBoard) {\n      const cards = this.state.cards.slice();\n      cards[card.id].flipped = true;\n      cards[card.id].locked = true;\n      cards[card.id].flipCount++;\n      this.setState({ cards: cards });\n\n      const selectedCards = this.state.selectedCards.slice();\n      selectedCards.push(card);\n      if (selectedCards.length === 2) {\n        this.setState({ lockedBoard: true });\n        setTimeout(() => {\n          this.checkMatch(selectedCards);\n        }, 1000);\n      } else {\n        this.setState({ selectedCards: selectedCards });\n      }\n    }\n  };\n\n  checkMatch = selectedCards => {\n    const cards = this.state.cards.slice();\n    if (selectedCards[0].hash === selectedCards[1].hash) {\n      const matchCount = this.state.matchCount + 2;\n      if (matchCount === cards.length) {\n        console.log(\"You did it hey!\");\n        this.setState({ matchCount: 0 });\n      } else {\n        this.setState({ matchCount: matchCount });\n        //lucky match?\n        if (selectedCards[1].flipCount === 1) {\n          console.log(\"lucky match!\");\n        } else {\n          console.log(\"Yay! a match!\");\n        }\n      }\n    } else {\n      cards[selectedCards[0].id].flipped = false;\n      cards[selectedCards[1].id].flipped = false;\n      cards[selectedCards[0].id].locked = false;\n      cards[selectedCards[1].id].locked = false;\n      //flop? player has seen the corresponing card before...\n      let match = cards.filter(card => card.hash === selectedCards[0].hash);\n      match.splice(\n        selectedCards.findIndex(card => card.id === selectedCards[0].id),\n        1\n      );\n      if (selectedCards[0].flipCount > 1 && selectedCards[1].flipCount > 1) {\n        console.log(\"now that was pretty stupid!\");\n      } else if (match[0].flipCount > 0) {\n        console.log(\"you should have known!\");\n      } else {\n        console.log(\"go on explore...\");\n      }\n    }\n    selectedCards = [];\n    this.setState({\n      cards: cards,\n      selectedCards: selectedCards,\n      lockedBoard: false\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Fluffy Twins</h1>\n\n        <SelectBox\n          id=\"selectbox\"\n          options={this.state.boards}\n          onSelectChange={this.handleSelectBox}\n        />\n        <Board\n          cards={this.state.cards}\n          size={Math.ceil(this.state.selectedBoard.cols)}\n          onClick={card => this.handleClick(card)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}